#!/usr/bin/env python
# coding: utf-8

# In[34]:


#Movie Rating prediction 


# In[35]:


import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt


# In[36]:


data=pd.read_csv(r"D:\code soft\IMdb_movie.csv",encoding='latin-1')


# In[37]:


data


# In[38]:


data.shape


# In[39]:


data.describe


# In[40]:


data.info()


# In[41]:


data.dtypes


# In[42]:


data.isnull().sum()


# In[43]:


data['Year'].unique()


# In[44]:


data['Director'].unique()


# In[45]:


data.dtypes


# In[46]:


data['Rating'].count()


# In[47]:


data['Rating'].isnull()


# In[48]:


data['Rating'].isnull().sum()


# In[49]:


data['Rating'] = data['Rating'].fillna(data['Rating'].mean())


# In[50]:


data


# In[51]:


data['Duration']=data['Duration'].fillna(data['Duration'].mode())


# In[52]:


data


# In[53]:


df=pd.DataFrame(data)


# In[54]:


df


# In[55]:


sns.lineplot(data=df['Year'].value_counts())


# In[56]:


def top10(column):
    global df
    df[column].value_counts().sort_values(ascending=False).head(10).plot(kind='bar',figsize=(10,6),color='#988ED5')
    plt.xlabel(column,fontsize=15,fontweight='bold')
    plt.ylabel('Count',fontweight='bold',fontsize=15)
    plt.title("Top 10 {}".format(column),fontsize=25,fontweight='bold')
    plt.xticks(rotation=0,fontsize=7,fontweight='bold')
    plt.yticks(fontsize=10,fontweight='bold')
    plt.show()


# In[57]:


cols=['Director','Actor 1','Actor 2','Actor 3']
for items in cols:
    top10(items)


# In[58]:


director=df['Director'].value_counts()


# In[59]:


director


# In[60]:


director.count()


# In[62]:


plt.figure(figsize=(10, 6))
bars=sns.barplot(x=df['Director'].head(20).index, y=df['Director'].head(20).values, palette='viridis')
bars.set_xlabel('Directors')
bars.set_ylabel('Frequency of Movies')
bar.set_title('first 20 Frequency of Movies')
plt.show()


# In[63]:


genre_cout=df['Genre'].value_counts()
Genre_Count=genre_cout.head(15).reset_index().rename(columns={'index':'Genre','Genre':'Count'})

sns.barplot(x='Genre',y='Count',data=Genre_Count)

plt.title('Genre Counts',fontweight='bold')
plt.xlabel('Genre',fontweight='bold')
plt.ylabel('Count',fontweight='bold')
plt.xticks(rotation=90)


# In[80]:


from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error


# In[81]:


features=['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3']
X=df[features]
y=df['Rating']


# In[82]:


X_encode=pd.get_dummies(X,columns=features)


# In[83]:


X_train,X_test,y_train,y_test=train_test_split(X_encode,y,test_size=0.2,random_state=42)


# In[84]:


scaler=StandardScaler()
X_train_scaled=scaler.fit_transform(X_train)
X_test_scaled=scaler.fit_transform(X_test)


# In[85]:


model=LinearRegression()
model.fit(X_train_scaled,y_train)


# In[86]:


y_pred=model.predict(X_test_scaled)


# In[ ]:




